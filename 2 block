import cv2
import numpy as np
import matplotlib.pyplot as plt

# Read the image
image = cv2.imread('saad.jpg')

# Convert BGR to RGB (OpenCV uses BGR by default)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Display the original image
plt.subplot(2, 3, 1)
plt.imshow(image_rgb)
plt.title('Original Image')
plt.axis('off')

# 1. Grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
plt.subplot(2, 3, 2)
plt.imshow(gray_image, cmap='gray')
plt.title('Grayscale')
plt.axis('off')

# 2. Rotation
rows, cols, _ = image.shape
rotation_matrix = cv2.getRotationMatrix2D((cols / 2, rows / 2), 45, 1)
rotated_image = cv2.warpAffine(image, rotation_matrix, (cols, rows))
rotated_image_rgb = cv2.cvtColor(rotated_image, cv2.COLOR_BGR2RGB)
plt.subplot(2, 3, 3)
plt.imshow(rotated_image_rgb)
plt.title('Rotation (45 degrees)')
plt.axis('off')

# 3. Gaussian Blur
blurred_image = cv2.GaussianBlur(image, (5, 5), 0)
blurred_image_rgb = cv2.cvtColor(blurred_image, cv2.COLOR_BGR2RGB)
plt.subplot(2, 3, 4)
plt.imshow(blurred_image_rgb)
plt.title('Gaussian Blur')
plt.axis('off')

# 4. Image Flip
flipped_image = cv2.flip(image, 1) # 1: Horizontal Flip, 0: Vertical Flip, -1: Both Horizontal and Vertical Flip
flipped_image_rgb = cv2.cvtColor(flipped_image, cv2.COLOR_BGR2RGB)
plt.subplot(2, 3, 5)
plt.imshow(flipped_image_rgb)
plt.title('Horizontal Flip')
plt.axis('off')

# 5. Edge Detection (Canny)
edges = cv2.Canny(image, 100, 200)
plt.subplot(2, 3, 6)
plt.imshow(edges, cmap='gray')
plt.title('Edge Detection (Canny)')
plt.axis('off')

# Display the plots
plt.tight_layout()
plt.show()
